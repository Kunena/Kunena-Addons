<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE project>
<!--
  Kunena ant build file

  @package		Kunena
  @subpackage	plg_jomsocial_mykunena
  @copyright	Copyright (C) 2008 - 2012 Kunena Team. All rights reserved.
  				portions (C) 2007 MjazTools. All rights reserved.
  @license		GNU General Public License <http://www.gnu.org/copyleft/gpl.html>
  @link			http://www.kunena.org
  
  The following parameters can be defined inside the Eclipse build task as Arguments. They
  allow the build file to be platform independent as not path information resides within
  any of the build files.

  Parameters: (with default values - adjust the directories in Eclispe to your individual setup)
  	-Dproject_dir=..				(= workspace/mykunena)
  	-Dpackage_dir=../../packages	(= workspace/packages)
  	-Dtmp_dir=tmp					(= workspace/mykunena/build/tmp)
-->
<project name="mykunena" default="dist" basedir=".">
	<description>Ant Build File for Kunena Menu plugin for JomSocial</description>
	<condition property="project_dir" value="..">
		<not>
			<isset property="project_dir" />
		</not>
	</condition>
	<condition property="package_dir" value="../../packages">
		<not>
			<isset property="package_dir" />
		</not>
	</condition>
	<condition property="tmp_dir" value="tmp">
		<not>
			<isset property="tmp_dir" />
		</not>
	</condition>

	<property file="build.config.ini" />
	<property name="mykunena.assets" value="${project_dir}/mykunena/" />

	<target name="dist" depends="mkdir,archive,init,copy,package,tar,zip,gzip,bz2,info,cleanup" />

	<target name="mkdir">
		<mkdir dir="${tmp_dir}" />
		<mkdir dir="${package_dir}" />
		<mkdir dir="${package_dir}/archive" />
	</target>

	<target name="archive">
		<move todir="${package_dir}/archive" preservelastmodified="yes" includeEmptyDirs="no">
			<fileset dir="${package_dir}">
				<exclude name="archive/" />
			</fileset>
		</move>
	</target>

	<target name="init" depends="mkdir">
		<xmlproperty file="${project_dir}/${cfg.name}.xml" collapseAttributes="true" prefix="xml" keepRoot="false" />
		<tstamp>
			<format property="str.datefmt" pattern="${cfg.datefmt}" locale="${cfg.dateloc}" />
		</tstamp>
		<condition property="version.date" value="${str.datefmt}" else="">
			<istrue value="${cfg.adddate}" />
		</condition>

		<condition property="str.version" value="_${cfg.versionprefix}${xml.version}" else="">
			<istrue value="${cfg.addversion}" />
		</condition>
		<condition property="str.date" value="_${str.datefmt}" else="">
			<istrue value="${cfg.adddate}" />
		</condition>
		<property name="str.destfile" value="${package_dir}/${cfg.prefix}${cfg.name}${str.version}${str.date}" />

		<condition property="do.tar">
			<istrue value="${cfg.tar}" />
		</condition>
		<condition property="do.zip">
			<istrue value="${cfg.zip}" />
		</condition>
		<condition property="do.gzip">
			<istrue value="${cfg.gzip}" />
		</condition>
		<condition property="do.bz2">
			<istrue value="${cfg.bz2}" />
		</condition>

		<!-- File Sets for Copy -->
		<fileset id="assets" dir="${mykunena.assets}">
		</fileset>
		<fileset id="plugin" dir="${project_dir}">
			<exclude name="*.xml" />
			<exclude name="CHANGELOG.php" />
			<exclude name="COPYRIGHT.php" />
		</fileset>
	</target>

	<target name="copy" depends="init">
		<copy todir="${tmp_dir}/mykunena">
			<fileset refid="assets" />
		</copy>
	</target>

	<target name="package" depends="copy">
		<!-- Copy files that contain version tags again and perform token replacement -->
		<filter token="kunenaversion" value="${xml.version}" />
		<filter token="kunenaversiondate" value="${version.date}" />
		<filter token="kunenaversionname" value="${xml.versionname}" />

		<copy file="${project_dir}/${cfg.name}.xml" todir="${tmp_dir}" overwrite="true" filtering="true" />
		<copy file="${project_dir}/${cfg.name}.php" todir="${tmp_dir}" overwrite="true" filtering="false" />
		<copy file="${project_dir}/CHANGELOG.php" todir="${tmp_dir}" overwrite="true" filtering="false" />
		<copy file="${project_dir}/COPYRIGHT.php" todir="${tmp_dir}" overwrite="true" filtering="true" />
		<copy file="${project_dir}/README.txt" todir="${tmp_dir}" overwrite="true" filtering="true" />
		<copy todir="${tmp_dir}/language" overwrite="true" filtering="true" >
			<fileset dir="${project_dir}/language" />
		</copy>
	</target>

	<target name="tar" depends="package" if="do.tar">
		<tar destfile="${str.destfile}.tar" basedir="${tmp_dir}" />
	</target>

	<target name="zip" depends="package" if="do.zip">
		<zip destfile="${str.destfile}.zip" basedir="${tmp_dir}" />
	</target>

	<target name="gzip" depends="package" if="do.gzip">
		<tar destfile="${str.destfile}.tar.gz" basedir="${tmp_dir}" compression="gzip" />
	</target>

	<target name="bz2" depends="package" if="do.bz2">
		<tar destfile="${str.destfile}.tar.bz2" basedir="${tmp_dir}" compression="bzip2" />
	</target>

	<target name="info" depends="package">
		<echo message="Ant Version:     ${ant.version}" />
		<echo message="Project:         ${cfg.name}" />
		<echo message="XML Name:        ${xml.name}" />
		<echo message="XML Version:     ${xml.version}" />
		<echo message="XML Author:      ${xml.author}" />
		<echo message="XML Copyright:   ${xml.copyright}" />
		<echo message="XML License:     ${xml.license}" />
		<echo message="XML Description: ${xml.description}" />
		<echo message="Date:            ${TODAY}" />
	</target>

	<target name="cleanup" depends="info">
		<delete dir="${tmp_dir}" />
	</target>
</project>